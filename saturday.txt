public class Calculator
{
	public int square(int i) 
	{
		return i*i;
	}
	public String user(String string) 
	{
		return "sandip";
	}
	public String concat(String string, String string2) {
		
		return string+string2;
	}

	public int sub(int i, int j) {
		
		return i-j;
	}

	public int add(int i, int j) {
		
		return i+j;
	}

	public static boolean isSafe() {
		
		return false;
	}

}
-----------------------------------------------------------------------------------
//A unit test is a piece of code written by a developer that executes a specific functionality in the code to 
//be tested.
import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest 
{
	Calculator cal=new Calculator();
	@Test  //Used to identify that a method is a test method

	public void testSquares()
	{
		
		assertEquals(25,cal.square(5));
		assertEquals(5*5,cal.square(5));
		
	}
	
	@Test
	public void testUser()
	{
		assertEquals("sandip",cal.user("sandip"));
	}
	
	@Test
	public void stringtest1()
	{
	String result = cal.concat("Hello", "World");
	assertEquals("HelloWorld", result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2); 
	}
	
	
}
------------------------------------------------------------------------------------------
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.10</version>
    <scope>test</scope>
</dependency>
---------------------------------------------------------------
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CalculatorTest1 {
	Calculator c=null;
	
	@Before  //It is used to call the annotated function before running each of the tests

	public void before()
	{
	System.out.println("Before Test");
	 c=new Calculator();
	}
	
	@After  //It is used to call the annotated function after each test method
	public void after()
	{               
	 System.out.println("After Test"); 	}

	@Test //Used to identify that a method is a test method

	public void testAdd() {
	System.out.println("Add function");
	assertEquals("Result",5,c.add(2,3));
	assertTrue (Calculator.isSafe()); 
	assertFalse(Calculator.isSafe());
	}
	@Test  //Used to identify that a method is a test method

	public void testSub() {
	System.out.println("Sub function");
	assertEquals("Result",20,c.sub(100,80));
	}
	//It defines a timeout period in miliseconds with “timeout” parameter
	//The test fails when the timeout period exceeds. 

	@Test (timeout = 1000)
	public void testinfinity() 
	{
		while (true);
	}
	

}
------------------------------------------------------------------
import org.junit.Test; 
import static org.junit.Assert.*;  
public class TestAssertions 
{ 
 @Test    public void testAssertions()
 {       
//test data   
    String str1 = new String ("abc"); 
      String str2 = new String ("abc");   
    String str3 = null;    
   String str4 = "abc";   
    String str5 = "abc";     
  int val1 = 5;     
  int val2 = 6;       
String[] expectedArray = {"one", "two", "three"};      
 String[] resultArray =  {"one", "two", "three"};  
      //Check that two objects are equal     
  assertEquals(str1, str2);  
      //Check that a condition is true      
 assertTrue (val1 < val2);  
      //Check that a condition is false    
   assertFalse(val1 > val2);  
      //Check that an object isn't null      
 assertNotNull(str1);  
      //Check that an object is null      
 assertNull(str3);  
      //Check if two object references point to the same object      
 assertSame(str4,str5);  
      //Check if two object references not point to the same object   
    assertNotSame(str1,str3);  
      //Check whether two arrays are equal to each other.      
 assertArrayEquals(expectedArray, resultArray);   
 } 
} 
----------------------------------------------------------------------
public class Calculation {  
  
    public static int findMax(int arr[])
    {  
        int max=0;  
        for(int i=1;i<arr.length;i++)
        {  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
}  
----------------------------------------------------------
import static org.junit.Assert.*;  
 
import org.junit.Test;  
  
public class TestLogic {  
  
    @Test  
    public void testFindMax(){  
        assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));  
        assertEquals(14,Calculation.findMax(new int[]{11,13,14,12}));  
         
    }  
}  
-------------------------------------------------------------------------