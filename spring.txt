spring MVC+ hibernate integration
-----------------------------------------
package :-
1)Bean :- EmployeeBean.java
id,name,salary,designation
getter(),setter()
----------------------------------------------
2)controller:-EmployeeController.java
@Controller :- stereo type annotaion to know that it is a controller class.
@Autowired//(this controller class will depend upon another class like has-a relationship)
EmployeeService employeeservice; 
@RequestMapping("\save");
@RequestMapping("\update");
@RequestMapping("\delete");
@RequestMapping("\list");
---------------------------------------------------------------------------------------------------------------
EmployeeDao it is a interface
3)DAO :- It is a interface having abstract methods.
addEmployee(Employee employee);
List<Employee> listemployee();
deleteEmployee(int empid);
Employee getEmployee(int empid);
----------------------------------------------------------------------------------------
DAOImpl :-
will be having body for the abstract() of EmployeeDao using all the hibernate session methods
like to save :- session.save&update()
to delete :- session.delete()
to update :- session.update()
to fetch data :- session.get()  
EmployeeDaoImpl implements EmployeeDao
@Repository("employeeDao") //depend for database transactions
//Spring @Repository annotation is used to indicate that the class provides the mechanism for storage, retrieval, //search, update and delete operation on objects.
@Autowired
SessionFactory sessionFactory;
Then we will have the implementation methods
addEmployee(Employee emp) {session.save&update}
List {session.get}
deleteEmployee(Employee emp) {session.delete}
getEmployee(Employee emp) {session.critaria}
------------------------------------------------------------------------------------------------
service :- It is for spring we will have employeeService .it is a interface.same as EmployeeDao.
EmployeeService <=> EmloyeeDao
-----------------------------------------------------------------
EmployeeServiceImp <=>EmployeeDaoImpl
@service("employeeService");
@Autowired
EmployeeDao employeeDao;
@Transactional(-,-,-)  <-rollback and commit
--------------------------------------------------------------------------------
JSTL
-----------
<form:form>
      <table>
          <tr>
              <td>First Name:</td>
              <td><form:input path="firstName" /></td>
          </tr>
          <tr>
              <td>Last Name:</td>
              <td><form:input path="lastName" /></td>
          </tr>
          <tr>
              <td colspan="2">
                  <input type="submit" value="Save Changes" />
              </td>
          </tr>
      </table>
  </form:form>
---------------------------------------------------------------------------------------
<form method="POST">
      <table>
        <tr>
            <td>First Name:</td>
            <td><input name="firstName" type="text" value="Harry"/></td>
        </tr>
        <tr>
            <td>Last Name:</td>
            <td><input name="lastName" type="text" value="Potter"/></td>
        </tr>
        <tr>
            <td colspan="2">
              <input type="submit" value="Save Changes" />
            </td>
        </tr>
      </table>
  </form>
---------------------------------------------------------------------------
 try (Session session = getSessionFactory().openSession()) {
   tx = session.beginTransaction();
   Criteria criteria = session.createCriteria(persistentClass);
   criteria.add(Restrictions.eq("name", name));
----------------------------------------------------------------------------------------------------
private void myMethod () {
 Session s =SessionFactory sessionFactory;
sessionFactory.openSession()
-------------------------------------------------------------------------------
SessionFactory sessionFactory;
sessionFactory.getCurrentSession()
--------------------------------------------------------------------------------------------
Session session = getSessionFactory().openSession()) {
   tx = session.beginTransaction();
   Criteria criteria = session.createCriteria(persistentClass);
   criteria.add(Restrictions.eq("name", name));
--------------------------------------------------------------------------------------------------------------------
return (List<Employee>) sessionFactory.getCurrentSession().createCriteria(Employee.class).list();
------------------------------------------------------------------
example of a criteria query is one, which will simply return every object that corresponds to the Employee class.
------------------------------------------------------------------------------------------------------------------------------------------
Criteria cr = session.createCriteria(Employee.class);
List results = cr.list();
----------------------------------------------------------------------------------------








